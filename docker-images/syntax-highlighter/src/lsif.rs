// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `lib/codeintel/lsif_typed/lsif.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct Index {
    // message fields
    pub metadata: ::protobuf::SingularPtrField<Metadata>,
    pub document: ::protobuf::RepeatedField<Document>,
    pub package: ::protobuf::RepeatedField<Package>,
    pub external_symbols: ::protobuf::RepeatedField<Symbol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Index {
    fn default() -> &'a Index {
        <Index as ::protobuf::Message>::default_instance()
    }
}

impl Index {
    pub fn new() -> Index {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.Metadata metadata = 1;


    pub fn get_metadata(&self) -> &Metadata {
        self.metadata.as_ref().unwrap_or_else(|| <Metadata as ::protobuf::Message>::default_instance())
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    pub fn has_metadata(&self) -> bool {
        self.metadata.is_some()
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: Metadata) {
        self.metadata = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_metadata(&mut self) -> &mut Metadata {
        if self.metadata.is_none() {
            self.metadata.set_default();
        }
        self.metadata.as_mut().unwrap()
    }

    // Take field
    pub fn take_metadata(&mut self) -> Metadata {
        self.metadata.take().unwrap_or_else(|| Metadata::new())
    }

    // repeated .lib.codeintel.lsif_typed.Document document = 2;


    pub fn get_document(&self) -> &[Document] {
        &self.document
    }
    pub fn clear_document(&mut self) {
        self.document.clear();
    }

    // Param is passed by value, moved
    pub fn set_document(&mut self, v: ::protobuf::RepeatedField<Document>) {
        self.document = v;
    }

    // Mutable pointer to the field.
    pub fn mut_document(&mut self) -> &mut ::protobuf::RepeatedField<Document> {
        &mut self.document
    }

    // Take field
    pub fn take_document(&mut self) -> ::protobuf::RepeatedField<Document> {
        ::std::mem::replace(&mut self.document, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.Package package = 3;


    pub fn get_package(&self) -> &[Package] {
        &self.package
    }
    pub fn clear_package(&mut self) {
        self.package.clear();
    }

    // Param is passed by value, moved
    pub fn set_package(&mut self, v: ::protobuf::RepeatedField<Package>) {
        self.package = v;
    }

    // Mutable pointer to the field.
    pub fn mut_package(&mut self) -> &mut ::protobuf::RepeatedField<Package> {
        &mut self.package
    }

    // Take field
    pub fn take_package(&mut self) -> ::protobuf::RepeatedField<Package> {
        ::std::mem::replace(&mut self.package, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.Symbol external_symbols = 4;


    pub fn get_external_symbols(&self) -> &[Symbol] {
        &self.external_symbols
    }
    pub fn clear_external_symbols(&mut self) {
        self.external_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_external_symbols(&mut self, v: ::protobuf::RepeatedField<Symbol>) {
        self.external_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_external_symbols(&mut self) -> &mut ::protobuf::RepeatedField<Symbol> {
        &mut self.external_symbols
    }

    // Take field
    pub fn take_external_symbols(&mut self) -> ::protobuf::RepeatedField<Symbol> {
        ::std::mem::replace(&mut self.external_symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Index {
    fn is_initialized(&self) -> bool {
        for v in &self.metadata {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.document {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.package {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.external_symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.metadata)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.document)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.package)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.external_symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        for value in &self.document {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.package {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.external_symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.metadata.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        for v in &self.document {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.package {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.external_symbols {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Index {
        Index::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Metadata>>(
                "metadata",
                |m: &Index| { &m.metadata },
                |m: &mut Index| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Document>>(
                "document",
                |m: &Index| { &m.document },
                |m: &mut Index| { &mut m.document },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Package>>(
                "package",
                |m: &Index| { &m.package },
                |m: &mut Index| { &mut m.package },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Symbol>>(
                "external_symbols",
                |m: &Index| { &m.external_symbols },
                |m: &mut Index| { &mut m.external_symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Index>(
                "Index",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Index {
        static instance: ::protobuf::rt::LazyV2<Index> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Index::new)
    }
}

impl ::protobuf::Clear for Index {
    fn clear(&mut self) {
        self.metadata.clear();
        self.document.clear();
        self.package.clear();
        self.external_symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Index {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Index {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Metadata {
    // message fields
    pub tool_info: ::protobuf::SingularPtrField<ToolInfo>,
    pub project_root: ::std::string::String,
    pub position_encoding: Metadata_PositionEncoding,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Metadata {
    fn default() -> &'a Metadata {
        <Metadata as ::protobuf::Message>::default_instance()
    }
}

impl Metadata {
    pub fn new() -> Metadata {
        ::std::default::Default::default()
    }

    // .lib.codeintel.lsif_typed.ToolInfo tool_info = 1;


    pub fn get_tool_info(&self) -> &ToolInfo {
        self.tool_info.as_ref().unwrap_or_else(|| <ToolInfo as ::protobuf::Message>::default_instance())
    }
    pub fn clear_tool_info(&mut self) {
        self.tool_info.clear();
    }

    pub fn has_tool_info(&self) -> bool {
        self.tool_info.is_some()
    }

    // Param is passed by value, moved
    pub fn set_tool_info(&mut self, v: ToolInfo) {
        self.tool_info = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_tool_info(&mut self) -> &mut ToolInfo {
        if self.tool_info.is_none() {
            self.tool_info.set_default();
        }
        self.tool_info.as_mut().unwrap()
    }

    // Take field
    pub fn take_tool_info(&mut self) -> ToolInfo {
        self.tool_info.take().unwrap_or_else(|| ToolInfo::new())
    }

    // string project_root = 2;


    pub fn get_project_root(&self) -> &str {
        &self.project_root
    }
    pub fn clear_project_root(&mut self) {
        self.project_root.clear();
    }

    // Param is passed by value, moved
    pub fn set_project_root(&mut self, v: ::std::string::String) {
        self.project_root = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_project_root(&mut self) -> &mut ::std::string::String {
        &mut self.project_root
    }

    // Take field
    pub fn take_project_root(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.project_root, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.Metadata.PositionEncoding position_encoding = 3;


    pub fn get_position_encoding(&self) -> Metadata_PositionEncoding {
        self.position_encoding
    }
    pub fn clear_position_encoding(&mut self) {
        self.position_encoding = Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_position_encoding(&mut self, v: Metadata_PositionEncoding) {
        self.position_encoding = v;
    }
}

impl ::protobuf::Message for Metadata {
    fn is_initialized(&self) -> bool {
        for v in &self.tool_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.tool_info)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.project_root)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.position_encoding, 3, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.tool_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.project_root.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.project_root);
        }
        if self.position_encoding != Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.position_encoding);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.tool_info.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.project_root.is_empty() {
            os.write_string(2, &self.project_root)?;
        }
        if self.position_encoding != Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.position_encoding))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Metadata {
        Metadata::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ToolInfo>>(
                "tool_info",
                |m: &Metadata| { &m.tool_info },
                |m: &mut Metadata| { &mut m.tool_info },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "project_root",
                |m: &Metadata| { &m.project_root },
                |m: &mut Metadata| { &mut m.project_root },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Metadata_PositionEncoding>>(
                "position_encoding",
                |m: &Metadata| { &m.position_encoding },
                |m: &mut Metadata| { &mut m.position_encoding },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Metadata>(
                "Metadata",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Metadata {
        static instance: ::protobuf::rt::LazyV2<Metadata> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Metadata::new)
    }
}

impl ::protobuf::Clear for Metadata {
    fn clear(&mut self) {
        self.tool_info.clear();
        self.project_root.clear();
        self.position_encoding = Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Metadata {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Metadata_PositionEncoding {
    POSITION_ENCODING_UNSPECIFIED = 0,
    POSITION_ENCODING_UTF8 = 1,
    POSITION_ENCODING_UTF16 = 2,
}

impl ::protobuf::ProtobufEnum for Metadata_PositionEncoding {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Metadata_PositionEncoding> {
        match value {
            0 => ::std::option::Option::Some(Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED),
            1 => ::std::option::Option::Some(Metadata_PositionEncoding::POSITION_ENCODING_UTF8),
            2 => ::std::option::Option::Some(Metadata_PositionEncoding::POSITION_ENCODING_UTF16),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Metadata_PositionEncoding] = &[
            Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED,
            Metadata_PositionEncoding::POSITION_ENCODING_UTF8,
            Metadata_PositionEncoding::POSITION_ENCODING_UTF16,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Metadata_PositionEncoding>("Metadata.PositionEncoding", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Metadata_PositionEncoding {
}

impl ::std::default::Default for Metadata_PositionEncoding {
    fn default() -> Self {
        Metadata_PositionEncoding::POSITION_ENCODING_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Metadata_PositionEncoding {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ToolInfo {
    // message fields
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ToolInfo {
    fn default() -> &'a ToolInfo {
        <ToolInfo as ::protobuf::Message>::default_instance()
    }
}

impl ToolInfo {
    pub fn new() -> ToolInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 2;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ToolInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.version);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(2, &self.version)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ToolInfo {
        ToolInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &ToolInfo| { &m.name },
                |m: &mut ToolInfo| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &ToolInfo| { &m.version },
                |m: &mut ToolInfo| { &mut m.version },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ToolInfo>(
                "ToolInfo",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ToolInfo {
        static instance: ::protobuf::rt::LazyV2<ToolInfo> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ToolInfo::new)
    }
}

impl ::protobuf::Clear for ToolInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ToolInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ToolInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Document {
    // message fields
    pub relative_path: ::std::string::String,
    pub occurrences: ::protobuf::RepeatedField<Occurrence>,
    pub symbols: ::protobuf::RepeatedField<Symbol>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Document {
    fn default() -> &'a Document {
        <Document as ::protobuf::Message>::default_instance()
    }
}

impl Document {
    pub fn new() -> Document {
        ::std::default::Default::default()
    }

    // string relative_path = 1;


    pub fn get_relative_path(&self) -> &str {
        &self.relative_path
    }
    pub fn clear_relative_path(&mut self) {
        self.relative_path.clear();
    }

    // Param is passed by value, moved
    pub fn set_relative_path(&mut self, v: ::std::string::String) {
        self.relative_path = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_relative_path(&mut self) -> &mut ::std::string::String {
        &mut self.relative_path
    }

    // Take field
    pub fn take_relative_path(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.relative_path, ::std::string::String::new())
    }

    // repeated .lib.codeintel.lsif_typed.Occurrence occurrences = 2;


    pub fn get_occurrences(&self) -> &[Occurrence] {
        &self.occurrences
    }
    pub fn clear_occurrences(&mut self) {
        self.occurrences.clear();
    }

    // Param is passed by value, moved
    pub fn set_occurrences(&mut self, v: ::protobuf::RepeatedField<Occurrence>) {
        self.occurrences = v;
    }

    // Mutable pointer to the field.
    pub fn mut_occurrences(&mut self) -> &mut ::protobuf::RepeatedField<Occurrence> {
        &mut self.occurrences
    }

    // Take field
    pub fn take_occurrences(&mut self) -> ::protobuf::RepeatedField<Occurrence> {
        ::std::mem::replace(&mut self.occurrences, ::protobuf::RepeatedField::new())
    }

    // repeated .lib.codeintel.lsif_typed.Symbol symbols = 3;


    pub fn get_symbols(&self) -> &[Symbol] {
        &self.symbols
    }
    pub fn clear_symbols(&mut self) {
        self.symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbols(&mut self, v: ::protobuf::RepeatedField<Symbol>) {
        self.symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbols(&mut self) -> &mut ::protobuf::RepeatedField<Symbol> {
        &mut self.symbols
    }

    // Take field
    pub fn take_symbols(&mut self) -> ::protobuf::RepeatedField<Symbol> {
        ::std::mem::replace(&mut self.symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Document {
    fn is_initialized(&self) -> bool {
        for v in &self.occurrences {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.symbols {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.relative_path)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.occurrences)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.relative_path.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.relative_path);
        }
        for value in &self.occurrences {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.symbols {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.relative_path.is_empty() {
            os.write_string(1, &self.relative_path)?;
        }
        for v in &self.occurrences {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.symbols {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Document {
        Document::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "relative_path",
                |m: &Document| { &m.relative_path },
                |m: &mut Document| { &mut m.relative_path },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Occurrence>>(
                "occurrences",
                |m: &Document| { &m.occurrences },
                |m: &mut Document| { &mut m.occurrences },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Symbol>>(
                "symbols",
                |m: &Document| { &m.symbols },
                |m: &mut Document| { &mut m.symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Document>(
                "Document",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Document {
        static instance: ::protobuf::rt::LazyV2<Document> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Document::new)
    }
}

impl ::protobuf::Clear for Document {
    fn clear(&mut self) {
        self.relative_path.clear();
        self.occurrences.clear();
        self.symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Document {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Document {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Package {
    // message fields
    pub uri: ::std::string::String,
    pub name: ::std::string::String,
    pub version: ::std::string::String,
    pub manager: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    // string uri = 1;


    pub fn get_uri(&self) -> &str {
        &self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        &mut self.uri
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uri, ::std::string::String::new())
    }

    // string name = 2;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string version = 3;


    pub fn get_version(&self) -> &str {
        &self.version
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: ::std::string::String) {
        self.version = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut ::std::string::String {
        &mut self.version
    }

    // Take field
    pub fn take_version(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.version, ::std::string::String::new())
    }

    // string manager = 4;


    pub fn get_manager(&self) -> &str {
        &self.manager
    }
    pub fn clear_manager(&mut self) {
        self.manager.clear();
    }

    // Param is passed by value, moved
    pub fn set_manager(&mut self, v: ::std::string::String) {
        self.manager = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_manager(&mut self) -> &mut ::std::string::String {
        &mut self.manager
    }

    // Take field
    pub fn take_manager(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.manager, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Package {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uri)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.version)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.manager)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.version.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.version);
        }
        if !self.manager.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.manager);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.version.is_empty() {
            os.write_string(3, &self.version)?;
        }
        if !self.manager.is_empty() {
            os.write_string(4, &self.manager)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Package {
        Package::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uri",
                |m: &Package| { &m.uri },
                |m: &mut Package| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Package| { &m.name },
                |m: &mut Package| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "version",
                |m: &Package| { &m.version },
                |m: &mut Package| { &mut m.version },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "manager",
                |m: &Package| { &m.manager },
                |m: &mut Package| { &mut m.manager },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Package>(
                "Package",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Package {
        static instance: ::protobuf::rt::LazyV2<Package> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Package::new)
    }
}

impl ::protobuf::Clear for Package {
    fn clear(&mut self) {
        self.uri.clear();
        self.name.clear();
        self.version.clear();
        self.manager.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Symbol {
    // message fields
    pub uri: ::std::string::String,
    pub unique: Symbol_Unique,
    pub documentation: ::protobuf::RepeatedField<::std::string::String>,
    pub package_uri: ::std::string::String,
    pub reference_symbols: ::protobuf::RepeatedField<::std::string::String>,
    pub implementation_symbols: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Symbol {
    fn default() -> &'a Symbol {
        <Symbol as ::protobuf::Message>::default_instance()
    }
}

impl Symbol {
    pub fn new() -> Symbol {
        ::std::default::Default::default()
    }

    // string uri = 1;


    pub fn get_uri(&self) -> &str {
        &self.uri
    }
    pub fn clear_uri(&mut self) {
        self.uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_uri(&mut self, v: ::std::string::String) {
        self.uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uri(&mut self) -> &mut ::std::string::String {
        &mut self.uri
    }

    // Take field
    pub fn take_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uri, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.Symbol.Unique unique = 2;


    pub fn get_unique(&self) -> Symbol_Unique {
        self.unique
    }
    pub fn clear_unique(&mut self) {
        self.unique = Symbol_Unique::UNIQUE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_unique(&mut self, v: Symbol_Unique) {
        self.unique = v;
    }

    // repeated string documentation = 3;


    pub fn get_documentation(&self) -> &[::std::string::String] {
        &self.documentation
    }
    pub fn clear_documentation(&mut self) {
        self.documentation.clear();
    }

    // Param is passed by value, moved
    pub fn set_documentation(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.documentation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_documentation(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.documentation
    }

    // Take field
    pub fn take_documentation(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.documentation, ::protobuf::RepeatedField::new())
    }

    // string package_uri = 4;


    pub fn get_package_uri(&self) -> &str {
        &self.package_uri
    }
    pub fn clear_package_uri(&mut self) {
        self.package_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_package_uri(&mut self, v: ::std::string::String) {
        self.package_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_package_uri(&mut self) -> &mut ::std::string::String {
        &mut self.package_uri
    }

    // Take field
    pub fn take_package_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.package_uri, ::std::string::String::new())
    }

    // repeated string reference_symbols = 5;


    pub fn get_reference_symbols(&self) -> &[::std::string::String] {
        &self.reference_symbols
    }
    pub fn clear_reference_symbols(&mut self) {
        self.reference_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_reference_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.reference_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_reference_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.reference_symbols
    }

    // Take field
    pub fn take_reference_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.reference_symbols, ::protobuf::RepeatedField::new())
    }

    // repeated string implementation_symbols = 6;


    pub fn get_implementation_symbols(&self) -> &[::std::string::String] {
        &self.implementation_symbols
    }
    pub fn clear_implementation_symbols(&mut self) {
        self.implementation_symbols.clear();
    }

    // Param is passed by value, moved
    pub fn set_implementation_symbols(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.implementation_symbols = v;
    }

    // Mutable pointer to the field.
    pub fn mut_implementation_symbols(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.implementation_symbols
    }

    // Take field
    pub fn take_implementation_symbols(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.implementation_symbols, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for Symbol {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uri)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.unique, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.documentation)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.package_uri)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.reference_symbols)?;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.implementation_symbols)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uri.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uri);
        }
        if self.unique != Symbol_Unique::UNIQUE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(2, self.unique);
        }
        for value in &self.documentation {
            my_size += ::protobuf::rt::string_size(3, &value);
        };
        if !self.package_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.package_uri);
        }
        for value in &self.reference_symbols {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        for value in &self.implementation_symbols {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uri.is_empty() {
            os.write_string(1, &self.uri)?;
        }
        if self.unique != Symbol_Unique::UNIQUE_UNSPECIFIED {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.unique))?;
        }
        for v in &self.documentation {
            os.write_string(3, &v)?;
        };
        if !self.package_uri.is_empty() {
            os.write_string(4, &self.package_uri)?;
        }
        for v in &self.reference_symbols {
            os.write_string(5, &v)?;
        };
        for v in &self.implementation_symbols {
            os.write_string(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Symbol {
        Symbol::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uri",
                |m: &Symbol| { &m.uri },
                |m: &mut Symbol| { &mut m.uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Symbol_Unique>>(
                "unique",
                |m: &Symbol| { &m.unique },
                |m: &mut Symbol| { &mut m.unique },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "documentation",
                |m: &Symbol| { &m.documentation },
                |m: &mut Symbol| { &mut m.documentation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "package_uri",
                |m: &Symbol| { &m.package_uri },
                |m: &mut Symbol| { &mut m.package_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "reference_symbols",
                |m: &Symbol| { &m.reference_symbols },
                |m: &mut Symbol| { &mut m.reference_symbols },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "implementation_symbols",
                |m: &Symbol| { &m.implementation_symbols },
                |m: &mut Symbol| { &mut m.implementation_symbols },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Symbol>(
                "Symbol",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Symbol {
        static instance: ::protobuf::rt::LazyV2<Symbol> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Symbol::new)
    }
}

impl ::protobuf::Clear for Symbol {
    fn clear(&mut self) {
        self.uri.clear();
        self.unique = Symbol_Unique::UNIQUE_UNSPECIFIED;
        self.documentation.clear();
        self.package_uri.clear();
        self.reference_symbols.clear();
        self.implementation_symbols.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Symbol {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Symbol {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Symbol_Unique {
    UNIQUE_UNSPECIFIED = 0,
    UNIQUE_DOCUMENT = 1,
    UNIQUE_GLOBAL = 2,
}

impl ::protobuf::ProtobufEnum for Symbol_Unique {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Symbol_Unique> {
        match value {
            0 => ::std::option::Option::Some(Symbol_Unique::UNIQUE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Symbol_Unique::UNIQUE_DOCUMENT),
            2 => ::std::option::Option::Some(Symbol_Unique::UNIQUE_GLOBAL),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Symbol_Unique] = &[
            Symbol_Unique::UNIQUE_UNSPECIFIED,
            Symbol_Unique::UNIQUE_DOCUMENT,
            Symbol_Unique::UNIQUE_GLOBAL,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Symbol_Unique>("Symbol.Unique", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Symbol_Unique {
}

impl ::std::default::Default for Symbol_Unique {
    fn default() -> Self {
        Symbol_Unique::UNIQUE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Symbol_Unique {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Occurrence {
    // message fields
    pub range: ::std::vec::Vec<i32>,
    pub symbol_uri: ::std::string::String,
    pub symbol_role: Occurrence_Role,
    pub symbol_documentation: ::protobuf::RepeatedField<::std::string::String>,
    pub highlight: Occurrence_Highlight,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Occurrence {
    fn default() -> &'a Occurrence {
        <Occurrence as ::protobuf::Message>::default_instance()
    }
}

impl Occurrence {
    pub fn new() -> Occurrence {
        ::std::default::Default::default()
    }

    // repeated int32 range = 1;


    pub fn get_range(&self) -> &[i32] {
        &self.range
    }
    pub fn clear_range(&mut self) {
        self.range.clear();
    }

    // Param is passed by value, moved
    pub fn set_range(&mut self, v: ::std::vec::Vec<i32>) {
        self.range = v;
    }

    // Mutable pointer to the field.
    pub fn mut_range(&mut self) -> &mut ::std::vec::Vec<i32> {
        &mut self.range
    }

    // Take field
    pub fn take_range(&mut self) -> ::std::vec::Vec<i32> {
        ::std::mem::replace(&mut self.range, ::std::vec::Vec::new())
    }

    // string symbol_uri = 2;


    pub fn get_symbol_uri(&self) -> &str {
        &self.symbol_uri
    }
    pub fn clear_symbol_uri(&mut self) {
        self.symbol_uri.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol_uri(&mut self, v: ::std::string::String) {
        self.symbol_uri = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_symbol_uri(&mut self) -> &mut ::std::string::String {
        &mut self.symbol_uri
    }

    // Take field
    pub fn take_symbol_uri(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.symbol_uri, ::std::string::String::new())
    }

    // .lib.codeintel.lsif_typed.Occurrence.Role symbol_role = 3;


    pub fn get_symbol_role(&self) -> Occurrence_Role {
        self.symbol_role
    }
    pub fn clear_symbol_role(&mut self) {
        self.symbol_role = Occurrence_Role::ROLE_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_symbol_role(&mut self, v: Occurrence_Role) {
        self.symbol_role = v;
    }

    // repeated string symbol_documentation = 4;


    pub fn get_symbol_documentation(&self) -> &[::std::string::String] {
        &self.symbol_documentation
    }
    pub fn clear_symbol_documentation(&mut self) {
        self.symbol_documentation.clear();
    }

    // Param is passed by value, moved
    pub fn set_symbol_documentation(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.symbol_documentation = v;
    }

    // Mutable pointer to the field.
    pub fn mut_symbol_documentation(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.symbol_documentation
    }

    // Take field
    pub fn take_symbol_documentation(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.symbol_documentation, ::protobuf::RepeatedField::new())
    }

    // .lib.codeintel.lsif_typed.Occurrence.Highlight highlight = 5;


    pub fn get_highlight(&self) -> Occurrence_Highlight {
        self.highlight
    }
    pub fn clear_highlight(&mut self) {
        self.highlight = Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED;
    }

    // Param is passed by value, moved
    pub fn set_highlight(&mut self, v: Occurrence_Highlight) {
        self.highlight = v;
    }
}

impl ::protobuf::Message for Occurrence {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_int32_into(wire_type, is, &mut self.range)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.symbol_uri)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.symbol_role, 3, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.symbol_documentation)?;
                },
                5 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.highlight, 5, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.range {
            my_size += ::protobuf::rt::value_size(1, *value, ::protobuf::wire_format::WireTypeVarint);
        };
        if !self.symbol_uri.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.symbol_uri);
        }
        if self.symbol_role != Occurrence_Role::ROLE_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(3, self.symbol_role);
        }
        for value in &self.symbol_documentation {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.highlight != Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED {
            my_size += ::protobuf::rt::enum_size(5, self.highlight);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.range {
            os.write_int32(1, *v)?;
        };
        if !self.symbol_uri.is_empty() {
            os.write_string(2, &self.symbol_uri)?;
        }
        if self.symbol_role != Occurrence_Role::ROLE_UNSPECIFIED {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(&self.symbol_role))?;
        }
        for v in &self.symbol_documentation {
            os.write_string(4, &v)?;
        };
        if self.highlight != Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED {
            os.write_enum(5, ::protobuf::ProtobufEnum::value(&self.highlight))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Occurrence {
        Occurrence::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "range",
                |m: &Occurrence| { &m.range },
                |m: &mut Occurrence| { &mut m.range },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol_uri",
                |m: &Occurrence| { &m.symbol_uri },
                |m: &mut Occurrence| { &mut m.symbol_uri },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Occurrence_Role>>(
                "symbol_role",
                |m: &Occurrence| { &m.symbol_role },
                |m: &mut Occurrence| { &mut m.symbol_role },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "symbol_documentation",
                |m: &Occurrence| { &m.symbol_documentation },
                |m: &mut Occurrence| { &mut m.symbol_documentation },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Occurrence_Highlight>>(
                "highlight",
                |m: &Occurrence| { &m.highlight },
                |m: &mut Occurrence| { &mut m.highlight },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Occurrence>(
                "Occurrence",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Occurrence {
        static instance: ::protobuf::rt::LazyV2<Occurrence> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Occurrence::new)
    }
}

impl ::protobuf::Clear for Occurrence {
    fn clear(&mut self) {
        self.range.clear();
        self.symbol_uri.clear();
        self.symbol_role = Occurrence_Role::ROLE_UNSPECIFIED;
        self.symbol_documentation.clear();
        self.highlight = Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Occurrence {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Occurrence {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Occurrence_Role {
    ROLE_UNSPECIFIED = 0,
    ROLE_DEFINITION = 1,
    ROLE_REFERENCE = 2,
}

impl ::protobuf::ProtobufEnum for Occurrence_Role {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Occurrence_Role> {
        match value {
            0 => ::std::option::Option::Some(Occurrence_Role::ROLE_UNSPECIFIED),
            1 => ::std::option::Option::Some(Occurrence_Role::ROLE_DEFINITION),
            2 => ::std::option::Option::Some(Occurrence_Role::ROLE_REFERENCE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Occurrence_Role] = &[
            Occurrence_Role::ROLE_UNSPECIFIED,
            Occurrence_Role::ROLE_DEFINITION,
            Occurrence_Role::ROLE_REFERENCE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Occurrence_Role>("Occurrence.Role", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Occurrence_Role {
}

impl ::std::default::Default for Occurrence_Role {
    fn default() -> Self {
        Occurrence_Role::ROLE_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Occurrence_Role {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Occurrence_Highlight {
    HIGHLIGHT_UNSPECIFIED = 0,
    HIGHLIGHT_STRING_LITERAL = 1,
    HIGHLIGHT_NUMERIC_LITERAL = 2,
    HIGHLIGHT_IDENTIFIER = 3,
    HIGHLIGHT_METHOD_IDENTIFIER = 4,
    HIGHLIGHT_TYPE_IDENTIFIER = 5,
    HIGHLIGHT_TERM_IDENTIFIER = 6,
    HIGHLIGHT_LOCAL_IDENTIFIER = 7,
    HIGHLIGHT_SHADED_IDENTIFIER = 8,
    HIGHLIGHT_PACKAGE_IDENTIFIER = 9,
}

impl ::protobuf::ProtobufEnum for Occurrence_Highlight {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Occurrence_Highlight> {
        match value {
            0 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED),
            1 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_STRING_LITERAL),
            2 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_NUMERIC_LITERAL),
            3 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_IDENTIFIER),
            4 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_METHOD_IDENTIFIER),
            5 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_TYPE_IDENTIFIER),
            6 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_TERM_IDENTIFIER),
            7 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_LOCAL_IDENTIFIER),
            8 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_SHADED_IDENTIFIER),
            9 => ::std::option::Option::Some(Occurrence_Highlight::HIGHLIGHT_PACKAGE_IDENTIFIER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Occurrence_Highlight] = &[
            Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED,
            Occurrence_Highlight::HIGHLIGHT_STRING_LITERAL,
            Occurrence_Highlight::HIGHLIGHT_NUMERIC_LITERAL,
            Occurrence_Highlight::HIGHLIGHT_IDENTIFIER,
            Occurrence_Highlight::HIGHLIGHT_METHOD_IDENTIFIER,
            Occurrence_Highlight::HIGHLIGHT_TYPE_IDENTIFIER,
            Occurrence_Highlight::HIGHLIGHT_TERM_IDENTIFIER,
            Occurrence_Highlight::HIGHLIGHT_LOCAL_IDENTIFIER,
            Occurrence_Highlight::HIGHLIGHT_SHADED_IDENTIFIER,
            Occurrence_Highlight::HIGHLIGHT_PACKAGE_IDENTIFIER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Occurrence_Highlight>("Occurrence.Highlight", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Occurrence_Highlight {
}

impl ::std::default::Default for Occurrence_Highlight {
    fn default() -> Self {
        Occurrence_Highlight::HIGHLIGHT_UNSPECIFIED
    }
}

impl ::protobuf::reflect::ProtobufValue for Occurrence_Highlight {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n#lib/codeintel/lsif_typed/lsif.proto\x12\x18lib.codeintel.lsif_typed\"\
    \x91\x02\n\x05Index\x12>\n\x08metadata\x18\x01\x20\x01(\x0b2\".lib.codei\
    ntel.lsif_typed.MetadataR\x08metadata\x12>\n\x08document\x18\x02\x20\x03\
    (\x0b2\".lib.codeintel.lsif_typed.DocumentR\x08document\x12;\n\x07packag\
    e\x18\x03\x20\x03(\x0b2!.lib.codeintel.lsif_typed.PackageR\x07package\
    \x12K\n\x10external_symbols\x18\x04\x20\x03(\x0b2\x20.lib.codeintel.lsif\
    _typed.SymbolR\x0fexternalSymbols\"\xc0\x02\n\x08Metadata\x12?\n\ttool_i\
    nfo\x18\x01\x20\x01(\x0b2\".lib.codeintel.lsif_typed.ToolInfoR\x08toolIn\
    fo\x12!\n\x0cproject_root\x18\x02\x20\x01(\tR\x0bprojectRoot\x12`\n\x11p\
    osition_encoding\x18\x03\x20\x01(\x0e23.lib.codeintel.lsif_typed.Metadat\
    a.PositionEncodingR\x10positionEncoding\"n\n\x10PositionEncoding\x12!\n\
    \x1dPOSITION_ENCODING_UNSPECIFIED\x10\0\x12\x1a\n\x16POSITION_ENCODING_U\
    TF8\x10\x01\x12\x1b\n\x17POSITION_ENCODING_UTF16\x10\x02\"8\n\x08ToolInf\
    o\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\
    \x02\x20\x01(\tR\x07version\"\xb3\x01\n\x08Document\x12#\n\rrelative_pat\
    h\x18\x01\x20\x01(\tR\x0crelativePath\x12F\n\x0boccurrences\x18\x02\x20\
    \x03(\x0b2$.lib.codeintel.lsif_typed.OccurrenceR\x0boccurrences\x12:\n\
    \x07symbols\x18\x03\x20\x03(\x0b2\x20.lib.codeintel.lsif_typed.SymbolR\
    \x07symbols\"c\n\x07Package\x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03uri\
    \x12\x12\n\x04name\x18\x02\x20\x01(\tR\x04name\x12\x18\n\x07version\x18\
    \x03\x20\x01(\tR\x07version\x12\x18\n\x07manager\x18\x04\x20\x01(\tR\x07\
    manager\"\xd0\x02\n\x06Symbol\x12\x10\n\x03uri\x18\x01\x20\x01(\tR\x03ur\
    i\x12?\n\x06unique\x18\x02\x20\x01(\x0e2'.lib.codeintel.lsif_typed.Symbo\
    l.UniqueR\x06unique\x12$\n\rdocumentation\x18\x03\x20\x03(\tR\rdocumenta\
    tion\x12\x1f\n\x0bpackage_uri\x18\x04\x20\x01(\tR\npackageUri\x12+\n\x11\
    reference_symbols\x18\x05\x20\x03(\tR\x10referenceSymbols\x125\n\x16impl\
    ementation_symbols\x18\x06\x20\x03(\tR\x15implementationSymbols\"H\n\x06\
    Unique\x12\x16\n\x12UNIQUE_UNSPECIFIED\x10\0\x12\x13\n\x0fUNIQUE_DOCUMEN\
    T\x10\x01\x12\x11\n\rUNIQUE_GLOBAL\x10\x02\"\x97\x05\n\nOccurrence\x12\
    \x14\n\x05range\x18\x01\x20\x03(\x05R\x05range\x12\x1d\n\nsymbol_uri\x18\
    \x02\x20\x01(\tR\tsymbolUri\x12J\n\x0bsymbol_role\x18\x03\x20\x01(\x0e2)\
    .lib.codeintel.lsif_typed.Occurrence.RoleR\nsymbolRole\x121\n\x14symbol_\
    documentation\x18\x04\x20\x03(\tR\x13symbolDocumentation\x12L\n\thighlig\
    ht\x18\x05\x20\x01(\x0e2..lib.codeintel.lsif_typed.Occurrence.HighlightR\
    \thighlight\"E\n\x04Role\x12\x14\n\x10ROLE_UNSPECIFIED\x10\0\x12\x13\n\
    \x0fROLE_DEFINITION\x10\x01\x12\x12\n\x0eROLE_REFERENCE\x10\x02\"\xbf\
    \x02\n\tHighlight\x12\x19\n\x15HIGHLIGHT_UNSPECIFIED\x10\0\x12\x1c\n\x18\
    HIGHLIGHT_STRING_LITERAL\x10\x01\x12\x1d\n\x19HIGHLIGHT_NUMERIC_LITERAL\
    \x10\x02\x12\x18\n\x14HIGHLIGHT_IDENTIFIER\x10\x03\x12\x1f\n\x1bHIGHLIGH\
    T_METHOD_IDENTIFIER\x10\x04\x12\x1d\n\x19HIGHLIGHT_TYPE_IDENTIFIER\x10\
    \x05\x12\x1d\n\x19HIGHLIGHT_TERM_IDENTIFIER\x10\x06\x12\x1e\n\x1aHIGHLIG\
    HT_LOCAL_IDENTIFIER\x10\x07\x12\x1f\n\x1bHIGHLIGHT_SHADED_IDENTIFIER\x10\
    \x08\x12\x20\n\x1cHIGHLIGHT_PACKAGE_IDENTIFIER\x10\tB>Z<github.com/sourc\
    egraph/sourcegraph/lib/codeintel/lsif_typed/J\xa8<\n\x07\x12\x05\x05\0\
    \xa2\x01\x01\n\xa9\x02\n\x01\x0c\x12\x03\x05\0\x122\x9e\x02\x20Protobuf\
    \x20schema\x20for\x20the\x20new\x20\"LSIF\x20typed\"\x20format.\x20See\
    \x20RFC\x20519\x20for\x20more\n\x20details:\n\x20https://docs.google.com\
    /document/d/1bfAZm4K2KUHCMoZiO4qFV7yZmK7wyYxI8MsEL-I6IJg/edit#heading=h.\
    trqab8y0kufp\n\x20Run\x20the\x20script\x20`./bin/proto-generate.sh`\x20t\
    o\x20generate\x20the\x20bindings\x20for\x20Go,\x20TypeScript\x20and\x20R\
    ust.\n\n\x08\n\x01\x02\x12\x03\x07\0!\n\x08\n\x01\x08\x12\x03\t\0S\n\t\n\
    \x02\x08\x0b\x12\x03\t\0S\n\xb7\x02\n\x02\x04\0\x12\x04\x0f\0\x1b\x01\
    \x1a\xaa\x02\x20Index\x20represents\x20an\x20LSIF\x20index.\x20An\x20ind\
    ex\x20can\x20be\x20consumed\x20in\x20a\x20streaming\n\x20fashion\x20by\
    \x20consuming\x20one\x20value\x20at\x20a\x20time.\x20In\x20Java,\x20use\
    \x20`parseDelimetedFrom`\n\x20to\x20consume\x20the\x20index\x20in\x20a\
    \x20streaming\x20fashion.\x20For\x20other\x20languages\x20like\x20Go,\
    \x20you\n\x20need\x20to\x20write\x20custom\x20logic\x20that\x20decodes\
    \x20one\x20LSIF\x20`Value`\x20at\x20a\x20time.\n\n\n\n\x03\x04\0\x01\x12\
    \x03\x0f\x08\r\n)\n\x04\x04\0\x02\0\x12\x03\x11\x02\x18\x1a\x1c\x20Metad\
    ata\x20about\x20this\x20index.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x11\
    \x02\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0b\x13\n\x0c\n\x05\x04\0\
    \x02\0\x03\x12\x03\x11\x16\x17\nc\n\x04\x04\0\x02\x01\x12\x03\x14\x02!\
    \x1aV\x20Documents\x20that\x20belong\x20to\x20this\x20index\x20or\x20the\
    \x20packages\x20that\x20are\x20defined\x20by\n\x20this\x20index.\n\n\x0c\
    \n\x05\x04\0\x02\x01\x04\x12\x03\x14\x02\n\n\x0c\n\x05\x04\0\x02\x01\x06\
    \x12\x03\x14\x0b\x13\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x14\x14\x1c\n\
    \x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x14\x1f\x20\ns\n\x04\x04\0\x02\x02\
    \x12\x03\x17\x02\x1f\x1af\x20Packages\x20that\x20are\x20either\x20refere\
    nced\x20from\x20this\x20index\x20or\x20the\x20packages\x20that\n\x20are\
    \x20defined\x20by\x20this\x20index.\n\n\x0c\n\x05\x04\0\x02\x02\x04\x12\
    \x03\x17\x02\n\n\x0c\n\x05\x04\0\x02\x02\x06\x12\x03\x17\x0b\x12\n\x0c\n\
    \x05\x04\0\x02\x02\x01\x12\x03\x17\x13\x1a\n\x0c\n\x05\x04\0\x02\x02\x03\
    \x12\x03\x17\x1d\x1e\ni\n\x04\x04\0\x02\x03\x12\x03\x1a\x02'\x1a\\\x20Sy\
    mbols\x20that\x20are\x20defined\x20outside\x20of\x20this\x20index\x20but\
    \x20are\x20referenced\x20from\n\x20inside\x20this\x20index.\n\n\x0c\n\
    \x05\x04\0\x02\x03\x04\x12\x03\x1a\x02\n\n\x0c\n\x05\x04\0\x02\x03\x06\
    \x12\x03\x1a\x0b\x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x1a\x12\"\n\
    \x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x1a%&\n\n\n\x02\x04\x01\x12\x04\x1d\
    \0)\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1d\x08\x10\n\x0c\n\x04\x04\x01\
    \x04\0\x12\x04\x1e\x02\"\x03\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x1e\
    \x07\x17\n\r\n\x06\x04\x01\x04\0\x02\0\x12\x03\x1f\x04&\n\x0e\n\x07\x04\
    \x01\x04\0\x02\0\x01\x12\x03\x1f\x04!\n\x0e\n\x07\x04\x01\x04\0\x02\0\
    \x02\x12\x03\x1f$%\n\r\n\x06\x04\x01\x04\0\x02\x01\x12\x03\x20\x04\x1f\n\
    \x0e\n\x07\x04\x01\x04\0\x02\x01\x01\x12\x03\x20\x04\x1a\n\x0e\n\x07\x04\
    \x01\x04\0\x02\x01\x02\x12\x03\x20\x1d\x1e\n\r\n\x06\x04\x01\x04\0\x02\
    \x02\x12\x03!\x04\x20\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x01\x12\x03!\x04\
    \x1b\n\x0e\n\x07\x04\x01\x04\0\x02\x02\x02\x12\x03!\x1e\x1f\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03#\x02\x19\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03#\
    \x02\n\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03#\x0b\x14\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03#\x17\x18\n\xa2\x01\n\x04\x04\x01\x02\x01\x12\x03'\
    \x02\x1a\x1a\x94\x01\x20URI-encoded\x20absolute\x20path\x20to\x20the\x20\
    root\x20directory\x20of\x20this\x20index.\x20All\n\x20documents\x20in\
    \x20this\x20index\x20must\x20appear\x20in\x20a\x20subdirectory\x20of\x20\
    this\x20root\n\x20directory.\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03'\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03'\t\x15\n\x0c\n\x05\x04\
    \x01\x02\x01\x03\x12\x03'\x18\x19\n\x0b\n\x04\x04\x01\x02\x02\x12\x03(\
    \x02)\n\x0c\n\x05\x04\x01\x02\x02\x06\x12\x03(\x02\x12\n\x0c\n\x05\x04\
    \x01\x02\x02\x01\x12\x03(\x13$\n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03('\
    (\n\n\n\x02\x04\x02\x12\x04+\0.\x01\n\n\n\x03\x04\x02\x01\x12\x03+\x08\
    \x10\n\x0b\n\x04\x04\x02\x02\0\x12\x03,\x02\x12\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03,\t\r\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x03,\x10\x11\n\x0b\n\x04\x04\x02\x02\x01\
    \x12\x03-\x02\x15\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\x03-\x02\x08\n\x0c\
    \n\x05\x04\x02\x02\x01\x01\x12\x03-\t\x10\n\x0c\n\x05\x04\x02\x02\x01\
    \x03\x12\x03-\x13\x14\nJ\n\x02\x04\x03\x12\x041\08\x01\x1a>\x20Document\
    \x20defines\x20information\x20about\x20a\x20particular\x20source\x20file\
    .\n\n\n\n\x03\x04\x03\x01\x12\x031\x08\x10\nC\n\x04\x04\x03\x02\0\x12\
    \x033\x02\x1b\x1a6\x20Relative\x20path\x20to\x20the\x20`Index.project_ro\
    ot`\x20directory.\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x033\x02\x08\n\x0c\
    \n\x05\x04\x03\x02\0\x01\x12\x033\t\x16\n\x0c\n\x05\x04\x03\x02\0\x03\
    \x12\x033\x19\x1a\n;\n\x04\x04\x03\x02\x01\x12\x035\x02&\x1a.\x20Symbol\
    \x20occurrences\x20that\x20appear\x20in\x20this\x20file.\n\n\x0c\n\x05\
    \x04\x03\x02\x01\x04\x12\x035\x02\n\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\
    \x035\x0b\x15\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x035\x16!\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x035$%\n=\n\x04\x04\x03\x02\x02\x12\x037\x02\
    \x1e\x1a0\x20Symbols\x20that\x20are\x20defined\x20within\x20this\x20docu\
    ment.\n\n\x0c\n\x05\x04\x03\x02\x02\x04\x12\x037\x02\n\n\x0c\n\x05\x04\
    \x03\x02\x02\x06\x12\x037\x0b\x11\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x037\x12\x19\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x037\x1c\x1d\n\x81\x01\
    \n\x02\x04\x04\x12\x04<\0H\x01\x1au\x20Package\x20defines\x20a\x20publis\
    hable\x20artifact\x20such\x20as\x20an\x20npm\x20package,\x20Docker\n\x20\
    container,\x20JVM\x20dependency,\x20or\x20a\x20Cargo\x20crate.\n\n\n\n\
    \x03\x04\x04\x01\x12\x03<\x08\x0f\n\xe9\x01\n\x04\x04\x04\x02\0\x12\x03@\
    \x02\x11\x1a\xdb\x01\x20The\x20unique\x20identifier\x20of\x20this\x20pac\
    kage\x20that\x20can\x20be\x20referenced\x20from\n\x20`Symbol.package_uri\
    `.\x20\x20This\x20URI\x20is\x20not\x20intended\x20to\x20be\x20displayed\
    \x20to\x20humans,\n\x20but\x20it's\x20recommended\x20to\x20use\x20a\x20h\
    uman-readable\x20format\x20to\x20aid\x20with\x20debugging.\n\n\x0c\n\x05\
    \x04\x04\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x03@\t\x0c\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03@\x0f\x10\n]\n\x04\x04\
    \x04\x02\x01\x12\x03C\x02\x12\x1aP\x20Name\x20of\x20this\x20package,\x20\
    for\x20example\x20\"@types/react\"\x20or\n\x20\"com.google.guava:guava\"\
    .\n\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03C\x02\x08\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x03C\t\r\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03C\x10\
    \x11\nG\n\x04\x04\x04\x02\x02\x12\x03E\x02\x15\x1a:\x20Version\x20of\x20\
    this\x20package,\x20for\x20example\x20\"0.1.0\"\x20or\x20\"2.1.5\".\n\n\
    \x0c\n\x05\x04\x04\x02\x02\x05\x12\x03E\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \x02\x01\x12\x03E\t\x10\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03E\x13\x14\
    \nF\n\x04\x04\x04\x02\x03\x12\x03G\x02\x15\x1a9\x20Package\x20manager,\
    \x20for\x20example\x20\"npm\",\x20\"maven\"\x20or\x20\"cargo\".\n\n\x0c\
    \n\x05\x04\x04\x02\x03\x05\x12\x03G\x02\x08\n\x0c\n\x05\x04\x04\x02\x03\
    \x01\x12\x03G\t\x10\n\x0c\n\x05\x04\x04\x02\x03\x03\x12\x03G\x13\x14\nJ\
    \n\x02\x04\x05\x12\x04K\0l\x01\x1a>\x20Symbol\x20defines\x20a\x20symbol,\
    \x20such\x20as\x20a\x20function\x20or\x20an\x20interface.\n\n\n\n\x03\
    \x04\x05\x01\x12\x03K\x08\x0e\n\x0c\n\x04\x04\x05\x04\0\x12\x04L\x02P\
    \x03\n\x0c\n\x05\x04\x05\x04\0\x01\x12\x03L\x07\r\n\r\n\x06\x04\x05\x04\
    \0\x02\0\x12\x03M\x04\x1b\n\x0e\n\x07\x04\x05\x04\0\x02\0\x01\x12\x03M\
    \x04\x16\n\x0e\n\x07\x04\x05\x04\0\x02\0\x02\x12\x03M\x19\x1a\n\r\n\x06\
    \x04\x05\x04\0\x02\x01\x12\x03N\x04\x18\n\x0e\n\x07\x04\x05\x04\0\x02\
    \x01\x01\x12\x03N\x04\x13\n\x0e\n\x07\x04\x05\x04\0\x02\x01\x02\x12\x03N\
    \x16\x17\n\r\n\x06\x04\x05\x04\0\x02\x02\x12\x03O\x04\x16\n\x0e\n\x07\
    \x04\x05\x04\0\x02\x02\x01\x12\x03O\x04\x11\n\x0e\n\x07\x04\x05\x04\0\
    \x02\x02\x02\x12\x03O\x14\x15\n\x85\x01\n\x04\x04\x05\x02\0\x12\x03S\x02\
    \x11\x1ax\x20The\x20identifier\x20of\x20this\x20symbol,\x20which\x20can\
    \x20be\x20referenced\x20from\n\x20Occurence.\x20An\x20empty\x20uri\x20me\
    ans\x20this\x20symbol\x20can\x20be\x20ignored.\n\n\x0c\n\x05\x04\x05\x02\
    \0\x05\x12\x03S\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03S\t\x0c\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03S\x0f\x10\n\x81\x02\n\x04\x04\x05\
    \x02\x01\x12\x03X\x02\x14\x1a\xf3\x01\x20Determines\x20whether\x20this\
    \x20symbol\x20is\x20local\x20to\x20a\x20single\x20document\x20or\x20if\
    \x20can\x20be\n\x20referenced\x20from\x20multiple\x20documents.\n\x20Doc\
    ument\x20symbols\x20(`Document.symbols`)\x20can\x20be\x20either\x20local\
    \x20or\x20global.\n\x20External\x20symbols\x20(`Index.external_symbols`)\
    \x20must\x20be\x20global.\n\n\x0c\n\x05\x04\x05\x02\x01\x06\x12\x03X\x02\
    \x08\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03X\t\x0f\n\x0c\n\x05\x04\x05\
    \x02\x01\x03\x12\x03X\x12\x13\n\xb5\x02\n\x04\x04\x05\x02\x02\x12\x03]\
    \x02$\x1a\xa7\x02\x20(optional,\x20but\x20strongly\x20recommended)\x20Th\
    e\x20markdown-formatted\x20documentation\n\x20for\x20this\x20symbol.\x20\
    This\x20field\x20is\x20repeated\x20to\x20allow\x20different\x20kinds\x20\
    of\n\x20documentation.\x20\x20For\x20example,\x20it's\x20nice\x20to\x20i\
    nclude\x20both\x20the\x20signature\x20of\x20a\n\x20method\x20(parameters\
    \x20and\x20return\x20type)\x20along\x20with\x20the\x20accompanying\x20do\
    cstring.\n\n\x0c\n\x05\x04\x05\x02\x02\x04\x12\x03]\x02\n\n\x0c\n\x05\
    \x04\x05\x02\x02\x05\x12\x03]\x0b\x11\n\x0c\n\x05\x04\x05\x02\x02\x01\
    \x12\x03]\x12\x1f\n\x0c\n\x05\x04\x05\x02\x02\x03\x12\x03]\"#\n\x8b\x02\
    \n\x04\x04\x05\x02\x03\x12\x03b\x02\x19\x1a\xfd\x01\x20(optional)\x20Lin\
    ks\x20to\x20the\x20original\x20package\x20that\x20defines\x20this\x20sym\
    bol\x20to\n\x20enable\x20navigation\x20across\x20different\x20LSIF\x20in\
    dexes\x20(whether\x20they\x20come\x20from\n\x20different\x20projects\x20\
    or\x20git\x20repositories).\x20This\x20field\x20must\x20be\x20non-empty\
    \x20for\n\x20toplevel\x20symbols\x20(`Value.value`).\n\n\x0c\n\x05\x04\
    \x05\x02\x03\x05\x12\x03b\x02\x08\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\
    \x03b\t\x14\n\x0c\n\x05\x04\x05\x02\x03\x03\x12\x03b\x17\x18\n\xfc\x01\n\
    \x04\x04\x05\x02\x04\x12\x03g\x02(\x1a\xee\x01\x20(optional)\x20Symbols\
    \x20that\x20should\x20be\x20included\x20together\x20with\x20this\x20symb\
    ol\x20when\n\x20resolving\x20\"find\x20references\".\x20\x20For\x20examp\
    le,\x20the\x20symbol\x20of\x20a\x20TypeScript\x20or\n\x20Java\x20method\
    \x20that\x20implements\x20an\x20interface\x20method\x20should\x20list\
    \x20the\x20interface\n\x20method\x20here.\n\n\x0c\n\x05\x04\x05\x02\x04\
    \x04\x12\x03g\x02\n\n\x0c\n\x05\x04\x05\x02\x04\x05\x12\x03g\x0b\x11\n\
    \x0c\n\x05\x04\x05\x02\x04\x01\x12\x03g\x12#\n\x0c\n\x05\x04\x05\x02\x04\
    \x03\x12\x03g&'\n\xbe\x01\n\x04\x04\x05\x02\x05\x12\x03k\x02-\x1a\xb0\
    \x01\x20(optional)\x20Symbols\x20that\x20are\x20\"implemented\"\x20by\
    \x20this\x20symbol.\x20For\x20example,\n\x20the\x20symbol\x20of\x20a\x20\
    TypeScript\x20or\x20Java\x20class\x20that\x20implements\x20an\x20interfa\
    ce\n\x20should\x20list\x20the\x20interface\x20here.\n\n\x0c\n\x05\x04\
    \x05\x02\x05\x04\x12\x03k\x02\n\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x03k\
    \x0b\x11\n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x03k\x12(\n\x0c\n\x05\x04\
    \x05\x02\x05\x03\x12\x03k+,\nf\n\x02\x04\x06\x12\x05p\0\xa2\x01\x01\x1aY\
    \x20Occurrence\x20associates\x20a\x20source\x20position\x20with\x20a\x20\
    symbol\x20and/or\x20highlighting\n\x20information.\n\n\n\n\x03\x04\x06\
    \x01\x12\x03p\x08\x12\n\x0c\n\x04\x04\x06\x04\0\x12\x04q\x02u\x03\n\x0c\
    \n\x05\x04\x06\x04\0\x01\x12\x03q\x07\x0b\n\r\n\x06\x04\x06\x04\0\x02\0\
    \x12\x03r\x04\x19\n\x0e\n\x07\x04\x06\x04\0\x02\0\x01\x12\x03r\x04\x14\n\
    \x0e\n\x07\x04\x06\x04\0\x02\0\x02\x12\x03r\x17\x18\n\r\n\x06\x04\x06\
    \x04\0\x02\x01\x12\x03s\x04\x18\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x01\
    \x12\x03s\x04\x13\n\x0e\n\x07\x04\x06\x04\0\x02\x01\x02\x12\x03s\x16\x17\
    \n\r\n\x06\x04\x06\x04\0\x02\x02\x12\x03t\x04\x17\n\x0e\n\x07\x04\x06\
    \x04\0\x02\x02\x01\x12\x03t\x04\x12\n\x0e\n\x07\x04\x06\x04\0\x02\x02\
    \x02\x12\x03t\x15\x16\n\r\n\x04\x04\x06\x04\x01\x12\x05v\x02\x81\x01\x03\
    \n\x0c\n\x05\x04\x06\x04\x01\x01\x12\x03v\x07\x10\n\r\n\x06\x04\x06\x04\
    \x01\x02\0\x12\x03w\x04\x1e\n\x0e\n\x07\x04\x06\x04\x01\x02\0\x01\x12\
    \x03w\x04\x19\n\x0e\n\x07\x04\x06\x04\x01\x02\0\x02\x12\x03w\x1c\x1d\n\r\
    \n\x06\x04\x06\x04\x01\x02\x01\x12\x03x\x04!\n\x0e\n\x07\x04\x06\x04\x01\
    \x02\x01\x01\x12\x03x\x04\x1c\n\x0e\n\x07\x04\x06\x04\x01\x02\x01\x02\
    \x12\x03x\x1f\x20\n\r\n\x06\x04\x06\x04\x01\x02\x02\x12\x03y\x04\"\n\x0e\
    \n\x07\x04\x06\x04\x01\x02\x02\x01\x12\x03y\x04\x1d\n\x0e\n\x07\x04\x06\
    \x04\x01\x02\x02\x02\x12\x03y\x20!\n\r\n\x06\x04\x06\x04\x01\x02\x03\x12\
    \x03z\x04\x1d\n\x0e\n\x07\x04\x06\x04\x01\x02\x03\x01\x12\x03z\x04\x18\n\
    \x0e\n\x07\x04\x06\x04\x01\x02\x03\x02\x12\x03z\x1b\x1c\n\r\n\x06\x04\
    \x06\x04\x01\x02\x04\x12\x03{\x04$\n\x0e\n\x07\x04\x06\x04\x01\x02\x04\
    \x01\x12\x03{\x04\x1f\n\x0e\n\x07\x04\x06\x04\x01\x02\x04\x02\x12\x03{\"\
    #\n\r\n\x06\x04\x06\x04\x01\x02\x05\x12\x03|\x04\"\n\x0e\n\x07\x04\x06\
    \x04\x01\x02\x05\x01\x12\x03|\x04\x1d\n\x0e\n\x07\x04\x06\x04\x01\x02\
    \x05\x02\x12\x03|\x20!\n\r\n\x06\x04\x06\x04\x01\x02\x06\x12\x03}\x04\"\
    \n\x0e\n\x07\x04\x06\x04\x01\x02\x06\x01\x12\x03}\x04\x1d\n\x0e\n\x07\
    \x04\x06\x04\x01\x02\x06\x02\x12\x03}\x20!\n\r\n\x06\x04\x06\x04\x01\x02\
    \x07\x12\x03~\x04#\n\x0e\n\x07\x04\x06\x04\x01\x02\x07\x01\x12\x03~\x04\
    \x1e\n\x0e\n\x07\x04\x06\x04\x01\x02\x07\x02\x12\x03~!\"\n\r\n\x06\x04\
    \x06\x04\x01\x02\x08\x12\x03\x7f\x04$\n\x0e\n\x07\x04\x06\x04\x01\x02\
    \x08\x01\x12\x03\x7f\x04\x1f\n\x0e\n\x07\x04\x06\x04\x01\x02\x08\x02\x12\
    \x03\x7f\"#\n\x0e\n\x06\x04\x06\x04\x01\x02\t\x12\x04\x80\x01\x04%\n\x0f\
    \n\x07\x04\x06\x04\x01\x02\t\x01\x12\x04\x80\x01\x04\x20\n\x0f\n\x07\x04\
    \x06\x04\x01\x02\t\x02\x12\x04\x80\x01#$\n\x96\x07\n\x04\x04\x06\x02\0\
    \x12\x04\x94\x01\x02\x1b\x1a\x87\x07\x20The\x20source\x20position\x20of\
    \x20this\x20occurrence.\x20Must\x20be\x20exactly\x20three\x20or\x20four\
    \n\x20elements:\n\n\x20-\x20Four\x20elements:\x20[startLine,\x20startCha\
    racter,\x20endLine,\x20endCharacter]\n\x20-\x20Three\x20elements:\x20[st\
    artLine,\x20startCharacter,\x20endCharacter]\x20(endLine\x20==\n\x20star\
    tLine)\n\n\x20Line\x20numbers\x20and\x20characters\x20are\x20always\x200\
    -based.\x20Make\x20sure\x20to\x20increment\x20the\n\x20line/character\
    \x20values\x20before\x20displaying\x20them\x20in\x20an\x20editor-like\
    \x20UI\x20because\n\x20editors\x20conventionally\x20use\x201-based\x20nu\
    mbers.\n\n\x20Ranges\x20appear\x20frequently\x20in\x20real-world\x20LSIF\
    \x20payloads,\x20the\x20`repeated\x20int32`\n\x20encoding\x20was\x20chos\
    en\x20over\x20the\x20LSP\x20`Range(start:Position,end:Position)`\n\x20en\
    coding\x20for\x20performance\x20reasons.\x20\x20Benchmarks\x20reveal\x20\
    that\x20this\x20change\x20alone\n\x20reduces\x20the\x20total\x20payload\
    \x20size\x20by\x20~2x\x20in\x20both\x20compressed\x20JSON\x20or\x20Proto\
    buf\n\x20encoding.\x20This\x20encoding\x20is\x20admittedly\x20more\x20em\
    barrassing\x20to\x20work\x20with\x20in\n\x20some\x20programming\x20langu\
    ages\x20but\x20we\x20hope\x20the\x20increased\x20performance\n\x20improv\
    ements\x20make\x20up\x20for\x20it.\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04\
    \x94\x01\x02\n\n\r\n\x05\x04\x06\x02\0\x05\x12\x04\x94\x01\x0b\x10\n\r\n\
    \x05\x04\x06\x02\0\x01\x12\x04\x94\x01\x11\x16\n\r\n\x05\x04\x06\x02\0\
    \x03\x12\x04\x94\x01\x19\x1a\nv\n\x04\x04\x06\x02\x01\x12\x04\x97\x01\
    \x02\x18\x1ah\x20(optional)\x20References\x20the\x20`Symbol.uri`\x20fiel\
    d.\x20Can\x20be\x20empty\x20if\x20this\x20is\x20only\n\x20a\x20highlight\
    ing\x20occurrence.\n\n\r\n\x05\x04\x06\x02\x01\x05\x12\x04\x97\x01\x02\
    \x08\n\r\n\x05\x04\x06\x02\x01\x01\x12\x04\x97\x01\t\x13\n\r\n\x05\x04\
    \x06\x02\x01\x03\x12\x04\x97\x01\x16\x17\nV\n\x04\x04\x06\x02\x02\x12\
    \x04\x99\x01\x02\x17\x1aH\x20(optional)\x20Is\x20the\x20symbol_uri\x20de\
    fined\x20or\x20referenced\x20at\x20this\x20occurrence?\n\n\r\n\x05\x04\
    \x06\x02\x02\x06\x12\x04\x99\x01\x02\x06\n\r\n\x05\x04\x06\x02\x02\x01\
    \x12\x04\x99\x01\x07\x12\n\r\n\x05\x04\x06\x02\x02\x03\x12\x04\x99\x01\
    \x15\x16\n\xf0\x02\n\x04\x04\x06\x02\x03\x12\x04\x9f\x01\x02+\x1a\xe1\
    \x02\x20(optional)\x20Markdown-formatted\x20documentation\x20for\x20this\
    \x20specific\x20range.\x20\x20If\n\x20empty,\x20the\x20`Symbol.documenta\
    tion`\x20field\x20is\x20used\x20instead.\x20One\x20example\n\x20where\
    \x20this\x20field\x20might\x20be\x20useful\x20is\x20when\x20the\x20symbo\
    l\x20represents\x20a\x20generic\n\x20function\x20(with\x20abstract\x20ty\
    pe\x20parameters\x20such\x20as\x20`List<T>`)\x20and\x20at\x20this\n\x20o\
    ccurrence\x20we\x20know\x20the\x20exact\x20values\x20(such\x20as\x20`Lis\
    t<String>`).\n\n\r\n\x05\x04\x06\x02\x03\x04\x12\x04\x9f\x01\x02\n\n\r\n\
    \x05\x04\x06\x02\x03\x05\x12\x04\x9f\x01\x0b\x11\n\r\n\x05\x04\x06\x02\
    \x03\x01\x12\x04\x9f\x01\x12&\n\r\n\x05\x04\x06\x02\x03\x03\x12\x04\x9f\
    \x01)*\nX\n\x04\x04\x06\x02\x04\x12\x04\xa1\x01\x02\x1a\x1aJ\x20(optiona\
    l)\x20What\x20syntax\x20highlighting\x20class\x20should\x20be\x20used\
    \x20for\x20this\x20range?\n\n\r\n\x05\x04\x06\x02\x04\x06\x12\x04\xa1\
    \x01\x02\x0b\n\r\n\x05\x04\x06\x02\x04\x01\x12\x04\xa1\x01\x0c\x15\n\r\n\
    \x05\x04\x06\x02\x04\x03\x12\x04\xa1\x01\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
