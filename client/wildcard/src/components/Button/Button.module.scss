.btn {
    // Use placeholder-selector to extend only styles defined for `label`.
    font-weight: 500;
    letter-spacing: -(0.1/14) + em;
    display: inline-block;
    text-align: center;
    vertical-align: middle;
    border: 1px solid transparent;
    user-select: none;
    font-size: 0.875rem;
    line-height: 1.4285714286;
    border-radius: var(--border-radius);
    padding: 0.375rem 0.75rem;
    transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out,
        box-shadow 0.15s ease-in-out;
    &:disabled {
        cursor: not-allowed;
    }
}

.btn.btn-sm {
    // Use string interpolation and calc() to avoid using Sass own max() function.
    // See: https://github.com/sass/node-sass/issues/2815#issuecomment-575926329
    font-size: calc(min(0.75rem, #{(11/12)}em));
    line-height: 1rem;
    letter-spacing: -(0.25/12) + em;
    padding: var(--btn-padding-y-sm) 0.5rem;
}

.btn-link {
    color: var(--link-color);
    background-color: var(--link-1);

    &:global(.disabled),
    &:disabled {
        :global(.theme-light) & {
            opacity: 0.2;
        }

        :global(.theme-dark) & {
            opacity: 0.4;
        }
    }

    &:not(:disabled):not(:global(.disabled)) {
        &:hover:not(:global(.focus)):not(:focus) {
            text-decoration: underline;
            color: var(--link-hover-color);
        }

        &:focus,
        &:global(.focus),
        &:active,
        &:global(.active) {
            text-decoration: underline;

            :global(.theme-light) & {
                box-shadow: 0 0 0 2px var(--primary-2);
            }

            :global(.theme-dark) & {
                box-shadow: 0 0 0 2px var(--primary-3);
            }
        }
    }
}

.btn-block {
    display: block;
    width: 100%;
}

.btn-inline {
    display: inline-block;
}

@mixin button-variant(
    $name,
    $base-color,
    $light-color-variant,
    $dark-color-variant,
    $text-color: var(--light-text),
    $disabled-text-color: var(--light-text)
) {
    .btn-#{$name} {
        color: $text-color;
        border-color: $base-color;
        background-color: $base-color;

        &:global(.disabled),
        &:disabled {
            opacity: 1;
            background-color: $light-color-variant;
            border-color: $light-color-variant;
            color: $disabled-text-color;
        }

        &:not(:disabled):not(:global(.disabled)) {
            &:hover:not(:global(.focus)):not(:focus) {
                color: $text-color;
                background-color: $dark-color-variant;
            }

            &:focus,
            &:global(.focus),
            &:active,
            &:global(.active) {
                color: $text-color;
                background-color: $base-color;
                border-color: var(--body-bg);

                :global(.theme-light) & {
                    box-shadow: 0 0 0 2px $light-color-variant;
                }

                :global(.theme-dark) & {
                    box-shadow: 0 0 0 2px $dark-color-variant;
                }
            }
        }
    }

    :global(.show) > .btn-#{$name} :global(.dropdown-toggle) {
        color: $text-color;
        background-color: $base-color;
        border-color: var(--body-bg);

        :global(.theme-light) & {
            box-shadow: 0 0 0 2px $light-color-variant;
        }
        :global(.theme-dark) & {
            box-shadow: 0 0 0 2px $dark-color-variant;
        }
    }

    .btn-outline-#{$name} {
        color: var(--body-color);
        border-color: $base-color;
        background-color: transparent;

        &:global(.disabled),
        &:disabled {
            opacity: 1;
            color: var(--text-disabled);
            border-color: $light-color-variant;
        }

        &:not(:disabled):not(:global(.disabled)) {
            // Set inlined icons to match outline border
            svg {
                fill: $base-color;
            }

            &:hover:not(:global(.focus)):not(:focus) {
                background-color: var(--color-bg-1);
                :global(.theme-light) & {
                    color: $dark-color-variant;
                    border-color: $dark-color-variant;

                    svg {
                        fill: $dark-color-variant;
                    }
                }
                :global(.theme-dark) & {
                    color: $base-color;
                    border-color: $base-color;
                }
            }

            &:focus,
            &:global(.focus),
            &:active,
            &:global(.active) {
                color: var(--body-color);
                border-color: var(--body-bg);
                background-color: var(--body-bg);
                outline: none;

                :global(.theme-light) & {
                    box-shadow: 0 0 0 2px $light-color-variant;
                }

                :global(.theme-dark) & {
                    box-shadow: 0 0 0 2px $dark-color-variant;
                }
            }
        }
    }

    :global(.show) > .btn-outline-#{$name}:global(.dropdown-toggle) {
        color: var(--body-color);
        border-color: var(--body-bg);
        background-color: var(--body-bg);
        :global(.theme-light) & {
            box-shadow: 0 0 0 2px $light-color-variant;
        }
        :global(.theme-dark) & {
            box-shadow: 0 0 0 2px $dark-color-variant;
        }
    }
}

@include button-variant(
    $name: 'primary',
    $base-color: var(--primary),
    $light-color-variant: var(--primary-2),
    $dark-color-variant: var(--primary-3)
);

@include button-variant(
    $name: 'secondary',
    $base-color: var(--secondary),
    $light-color-variant: var(--secondary-2),
    $dark-color-variant: var(--secondary-3),
    // Use darker text colors for contrast
    $text-color: var(--body-color),
    $disabled-text-color: var(--text-disabled)
);

@include button-variant(
    $name: 'success',
    $base-color: var(--success),
    $light-color-variant: var(--success-2),
    $dark-color-variant: var(--success-3)
);

@include button-variant(
    $name: 'danger',
    $base-color: var(--danger),
    $light-color-variant: var(--danger-2),
    $dark-color-variant: var(--danger-3)
);

@include button-variant(
    $name: 'warning',
    $base-color: var(--warning),
    $light-color-variant: var(--warning-2),
    $dark-color-variant: var(--warning-3),
    // Use darker text colors for contrast
    $text-color: var(--dark-text),
    $disabled-text-color: var(--text-disabled)
);

@include button-variant(
    $name: 'info',
    $base-color: var(--info),
    $light-color-variant: var(--info-2),
    $dark-color-variant: var(--info-3),
    // Use darker text colors for contrast
    $text-color: var(--dark-text),
    $disabled-text-color: var(--text-disabled)
);

@include button-variant(
    $name: 'merged',
    $base-color: var(--merged),
    $light-color-variant: var(--merged-2),
    $dark-color-variant: var(--merged-3)
);

:global(.theme-dark),
:global(.theme-light) {
    // btn-secondary needs specific styles to ensure good contrast
    .btn-secondary,
    .btn-outline-secondary {
        &:global(.disabled),
        &:disabled {
            border-color: var(--input-disabled-bg);
        }

        &:not(:disabled):not(:global(.disabled)) {
            &:hover:not(:global(.focus)):not(:focus) {
                text-decoration: none;
                color: var(--body-color);
                border-color: var(--secondary);

                svg {
                    fill: var(--icon-color);
                }
            }

            &:focus,
            &:global(.focus),
            &:active,
            &:global(.active) {
                box-shadow: 0 0 0 2px var(--primary-2);
            }

            svg {
                fill: var(--icon-color);
            }
        }
    }
}
